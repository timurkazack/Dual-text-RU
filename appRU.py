import cadquery as cq
import streamlit as st
import os
import time
from streamlit_stl import stl_from_file


def letter(let, angle, fontPath=""):
    """Extrude a letter, center it and rotate of the input angle"""
    wp = (cq.Workplane('XZ')
          .text(let, fontsize, extr, fontPath=fontPath, valign='bottom')
          )
    b_box = wp.combine().objects[0].BoundingBox()
    x_shift = -(b_box.xlen / 2 + b_box.xmin)
    wp = (wp.translate([x_shift, extr / 2, 0])
          .rotate((0, 0, 0), (0, 0, 1), angle)
          )
    return wp


def dual_text(text1, text2, fontPath='', save='stl', b_h=2, b_pad=2, b_fil_per=0.8, space_per=0.3, export_name='file'):
    """Generate the dual letter illusion from the two text and save it"""
    space = fontsize * space_per
    res = cq.Assembly()
    last_ymax = 0
    for ind, ab in enumerate(zip(text1, text2)):
        try:
            a = letter(ab[0], 45, fontPath=fontPath)
            b = letter(ab[1], 135, fontPath=fontPath, )
            a_inter_b = a & b
            b_box = a_inter_b.objects[0].BoundingBox()
            a_inter_b = a_inter_b.translate([0, -b_box.ymin, 0])
            if ind:
                a_inter_b = a_inter_b.translate([0, last_ymax + space, 0])
            last_ymax = a_inter_b.objects[0].BoundingBox().ymax
            res.add(a_inter_b)
        except:
            last_ymax += space * 1.5

    b_box = res.toCompound().BoundingBox()
    res.add(cq.Workplane()
            .box(b_box.xlen + b_pad * 2, b_box.ylen + b_pad * 2, b_h, centered=(1, 0, 0))
            .translate([0, -b_pad, -b_h])
            .edges('|Z')
            .fillet(b_box.xlen / 2 * b_fil_per)
            )

    res = res.toCompound()
    res = res.translate([0, -b_box.ylen / 2, 0])

    cq.exporters.export(res, f'file_display.stl')
    cq.exporters.export(res, f"{export_name}.{save}")


if __name__ == "__main__":
    for file in os.listdir():
        if 'file' in file:
            try:
                os.remove(file)
            except:
                print(f'Cannot remove file {file}')

    st.title('Dual Text RU: –ò–ª—é–∑–∏—è –¥–≤–æ–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
    st.write("–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∏–ª–ª—é–∑–∏—é –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤, 3d-–∞–º–±–∏–≥—Ä–∞–º–º—É! –ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø—Ä–æ–µ–∫—Ç [–ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –º–µ–Ω—è "
             "—Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –Ω–∞ –¥–æ—à–∏–∫]"
             "(https://boosty.to/timurcode/donate))!",
             unsafe_allow_html=True)
    st.write("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ [—à—Ä–∏—Ñ—Ç—ã Google] (https://fonts.google.com/).",
             unsafe_allow_html=True)
    st.write("–ê—Ñ—Ç–æ—Ä [TimurCode](https://github.com/timurkazack).",
             unsafe_allow_html=True)

    col1, col2, col3 = st.columns(3)

    with col1:
        text1 = st.text_input('–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç', value="HAPPY")
    with col2:
        text2 = st.text_input('–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç', value="2025!")
    with col3:
        fontsize = st.number_input('–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞', min_value=1, max_value=None, value=20)
        extr = fontsize * 2

    if len(text1) != len(text2):
        st.warning("–≠—Ç–∏ –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã, –ª–∏—à–Ω–∏–µ –±—É–∫–≤—ã –±—É–¥—É—Ç –≤—ã—Ä–µ–∑–∞–Ω—ã", icon="‚ö†Ô∏è")
    if not text1.isupper() or not text2.isupper():
        st.warning("–ù–µ–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã –∏ –±—É–∫–≤—ã —Ä–∞–∑–Ω–æ–π –≤—ã—Å–æ—Ç—ã –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –ø–ª–æ—Ö–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", icon="‚ö†Ô∏è")

    col1, col2, col3 = st.columns(3)

    font_dir = os.listdir('fonts')
    with col1:
        font_name = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç', ['lato'] + sorted(font_dir))
    with col2:
        font_type_list = [f for f in os.listdir('fonts' + os.sep + font_name) if '.ttf' in f and '-' in f]

        if font_type_list:
            font_start_name = font_type_list[0].split('-')[0]
            font_type_list_name = [f.split('-')[1].strip('.ttf') for f in font_type_list]
            font_type = st.selectbox('–¢–∏–ø —à—Ä–∏—Ñ—Ç–∞', sorted(font_type_list_name))
            font_type_pathname = font_start_name + '-' + font_type + '.ttf'
            font_path = 'fonts' + os.sep + font_name + os.sep + font_type_pathname
        else:
            font_type_list = [f for f in os.listdir('fonts' + os.sep + font_name) if '.ttf' in f]
            font_type = st.selectbox('–¢–∏–ø —à—Ä–∏—Ñ—Ç–∞', sorted(font_type_list))
            font_path = 'fonts' + os.sep + font_name + os.sep + font_type
    with col3:
        space = st.slider('–ü—Ä–æ–±–µ–ª –≤ –±—É–∫–≤–∞—Ö (%)', 0, 200, step=1, value=30) / 100

    col1, col2, col3 = st.columns(3)
    with col1:
        b_h = st.slider('–í—ã—Å–æ—Ç–∞ –±–∞–∑–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è', 0.0, fontsize / 2, step=0.1, value=1.0)
    with col2:
        b_pad = st.slider('–†–∞–∑–º–∞—Ö –±–∞–∑–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è', 0.0, fontsize / 2, step=0.1, value=2.0)
    with col3:
        b_fil_per = st.slider('–°–∫—Ä—É–≥–ª—ë–Ω–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è (%)', 0, 100, step=1, value=80) / 100

    col1, _, _ = st.columns(3)
    with col1:
        out = st.selectbox('–¢–∏–ø –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞', ['stl', 'step'])

    if st.button('–†–µ–Ω–¥–µ—Ä'):
        start = time.time()
        with st.spinner('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'):
            dual_text(text1, text2, fontPath=font_path, save=out, b_h=b_h, b_pad=b_pad, b_fil_per=b_fil_per,
                      space_per=space)
        end = time.time()
        if f'file.{out}' not in os.listdir():
            st.error('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Å–º–æ–≥–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É.', icon="üö®")
        else:
            st.success(f'–û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω–æ –∑–∞ {int(end - start)} —Å.', icon="‚úÖ")
            with open(f'file.{out}', "rb") as file:
                btn = st.download_button(
                    label=f"–°–∫–∞—á–∞—Ç—å {out}",
                    data=file,
                    file_name=f'TextTangoRu_{text1}_{text2}_{font_name}-{font_type}.{out}',
                    mime=f"model/{out}"
                )

            stl_from_file('file_display.stl')